import logging

import aiogram
import pika
from aiogram import Bot, Dispatcher, types
from db.model import DB
import tg.users as users
import tg.admin as admin


def init_handlers(dp: aiogram.Dispatcher, db: DB, cash_users: set, admins: list[int], channel: pika.connection.Connection.channel):
    flags, stack = {}, {}
    for i in admins:
        flags[i] = ""
        stack[i] = []

    @dp.message_handler(commands=["start"])
    @dp.message_handler(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    async def handler(message: types.Message):
        if message.from_user.id in admins:
            await message.answer(
                text="–ê–¥–º–∏–Ω–æ—á–∫–∞",
                reply_markup=admin.admin()
            )
        if message.from_user.id not in cash_users:
            await message.answer(
                text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n" +
                     "–†–∞–¥ —á—Ç–æ –í—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –∫–æ –º–Ω–µ. –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 2 –¥–Ω—è,\n" +
                     "—Ö–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?",
                reply_markup=users.new_user()
            )
            return
        await message.answer(text="–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=users.main_loby())

    @dp.message_handler(text='FAQ')
    async def user_handler(message: types.Message):
        await message.answer(text=users.faq())

    @dp.message_handler(text='–ü–æ–¥–¥–µ—Ä–∂–∫–∞')
    async def user_handler(message: types.Message):
        await message.answer(text=users.support())

    @dp.message_handler(text='–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è')
    async def user_handler(message: types.Message):
        await message.answer(text=users.instruction())

    # admins
    @dp.message_handler(text='–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä')
    async def admin_handler(message: types.Message):
        if message.from_user.id in admins:
            await message.answer(text=admin.server_example())
            flags[message.from_user.id] = "create_server"
            return
    # –¢–∞—Ä–∏—Ñ—ã + –∫–ª—é—á
    @dp.message_handler(text='–¢–∞—Ä–∏—Ñ—ã')
    @dp.message_handler(text='–ù–µ—Ç-—Ö–æ—á—É —Å—Ä–∞–∑—É –∫—É–ø–∏—Ç—å —Ç–∞—Ä–∏—Ñ. üá≥üá±')
    async def admin_handler(message: types.Message):
        await message.answer(text="–í—ã–±–∏—Ä–∞–π—Ç–µ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=users.tariffs())

    @dp.message_handler(text="–ú–æ–π –∫–ª—é—á")
    async def admin_handler(message: types.Message):
        us = users.User(message.from_user.id)
        print(us)

    # –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    @dp.message_handler(text="–î–∞!")
    async def user_handler(message: types.Message):
        await message.answer(
            text="–°—É–ø–µ—Ä, –º–æ–π –í–ü–ù —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è 'Outline'\n–í–∞–º –Ω—É–∂–Ω–æ –µ–≥–æ —Å–∫–∞—á–∞—Ç—å, –≤–æ—Ç —Å—Å—ã–ª–∫–∏ :",
            reply_markup=users.free_period_Inline())
        await message.answer(text="–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã, –º—ã –º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å",
                             reply_markup=users.free_period())

    @dp.message_handler(text="–•–æ—Ä–æ—à–æ —Å–∫–∞—á–∞–ª. –ß—Ç–æ –¥–∞–ª–µ–µ?")
    async def user_handler(message: types.Message):
        pass






    @dp.message_handler(content_types=["text"])
    async def admin_handler(message: types.Message):
        if message.from_user.id in admins:
            text, fl = admin.admin_example(flags, message, stack)
            if not fl:
                await message.answer(text=text)
            elif fl == "add_server":
                channel.basic_publish(exchange="", routing_key="server", body=",".join(stack[message.from_user.id]))
                await message.answer(text="–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")

    print("tg_bot start")
